#include "bpe.h"
#include <stdio.h>

int
main ()
{
  const char* filename = "the-verdict.txt";
  size_t size;
  char* training_text = read_file_to_buffer(filename, &size);
  
  
  /* const unsigned char *text */
  /*     = (unsigned char *) "This is a test for byte pair encoding. Byte pair encoding compresses " */
  /*                         "text by replacing frequent pairs. 你好, 世界!"; */

  const unsigned char *text
    = (unsigned char *) "the cat is in the hat";
  int text_len = strlen ((const char *) text);
  int num_merges = 300;

  printf("Original text: %s\n", text);
  printf ("Training text length in bytes: %d\n", (int)size); 
  DEBUG_PRINT ("Raw bytes: ");
  print_bytes_hex ((unsigned char *) text, text_len);
  DEBUG_PRINT ("\n");

  // Train the BPE
  int vocab_size;
  VocabularyEntry *vocab = train_bpe ((unsigned char*)training_text, (int)size, num_merges, &vocab_size);

  // Encode the text
  int encoded_len;
  int *encoded = encode (text, text_len, vocab, vocab_size, &encoded_len);

  // Print encoded result
  DEBUG_PRINT ("\nEncoded text (as vocabulary indices):\n");
  for (int i = 0; i < encoded_len; i++)
    {
      DEBUG_PRINT ("%d ", encoded[i]);
    }
  DEBUG_PRINT ("\n");
  printf("Original length: %d bytes, Endoded length: %d tokens\n", text_len, encoded_len);

  // Decode the encoded text
  int decoded_len;
  unsigned char *decoded = decode (encoded, encoded_len, vocab, vocab_size, &decoded_len);

  DEBUG_PRINT ("\nDecoded text: %s\n", decoded);
  DEBUG_PRINT ("Decoded length: %d bytes\n", decoded_len);
  DEBUG_PRINT ("Verification - raw bytes of decoded: ");
  print_bytes_hex (decoded, decoded_len);

  // Verify the decoded text matches the original
  if (decoded_len == text_len && memcmp (text, decoded, text_len) == 0)
    {
      DEBUG_PRINT ("\nVerification PASSED: Decoded text matches original text perfectly.\n");
    }
  else
    {
      DEBUG_PRINT ("\nVerification FAILED: Decoded text does not match original text.\n");
    }

  free_vocabulary (vocab, vocab_size);
  free (encoded);
  free (decoded);

  return 0;
}
